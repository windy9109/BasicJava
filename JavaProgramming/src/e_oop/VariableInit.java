package e_oop;

public class VariableInit {

	/*
	 * 변수 초기화
	 */
	
	
	//명시적 초기화(기본)
	int var = 10;
	static int classVar =20;
	
	//초기화 블럭
	//// 인스턴스 초기화
	{
		var = 20;
	}
	////클래스 초기화
	static {
		classVar = 40;
	}
	
	//생성자(중요)
	/*
	 *- 클래스와 같은 이름의 메서드
	 *- 인스턴스 변수를 초기화 하기 위해 사용한다.
	 *- 클래스에 생성자는 반드시 하나이상 존재해야한다.
	 *- 직접선언해주지 않으면 컴파일러가 기본 생성자를 만들어준다.
	 *- 생성자는 리턴타입이 없다.
	 * 
	*/
	
	
	
	VariableInit(){
		var =50;
		//생성자를 사용하는 이유는 파라미터를 사용할 수 있기 때문이다.
		
	}
	
	public static void main(String[] args) {
		
		//생성자를 사용하지 않았을때
		Init i1 = new Init();
		i1.a = 10;
		i1.b = 20;
		i1.c = 30;
		
		Init i2 =new Init();
		i2.a = 10;
		i2.b = 20;
		i2.c = 30;
		
		//생성자를 사용했을때
		//값을 외부에서 결정해야할때 사용함.
		Init i3 =new Init(70,80,90);
		
	
		
		
	}
	
}



class Init{
	int a;
	int b;
	int c;
	
	Init(int a, int b, int c){
		this.a =a; //this란 객체의 주소가 저장되어있는 변수다. 인스턴스 변수와 지역변수의 이름이 같을때 둘을 구분하기 위해 사용한다.
		this.b =b;
		this.c =c;
	}
	
//생성자를 사용하지않는 초기화블럭, 이걸명시해야 생성자를 혼용해서 사용해도 오류가 나지않음
Init(){
	this(10,20,30); //파라미터가 3개있는 생성자 호출함
	//this() : 생성자에서 다른 생성자를 호출할때 사용한다.
	//메서드는 이름이 중복되어도 된다.
	//오버로딩: 같은이름의 메서드를 여러개 정의하는것 -> 파라미터의 갯수,타입으로 구분함
	
	}



}




